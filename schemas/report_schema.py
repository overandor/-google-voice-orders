import uuid
from datetime import datetime
from typing import Dict, Any, Optional

from pydantic import BaseModel, Field
from zoneinfo import ZoneInfo

APP_VERSION = "0.1.0"
SCHEMA_VERSION = "1.0.0"

class TextMetrics(BaseModel):
    token_count: int = Field(..., description="Number of tokens in the text.")
    word_count: int = Field(..., description="Number of words in the text.")
    char_count: int = Field(..., description="Number of characters in the text.")
    semantic_density: float = Field(..., description="Ratio of non-stop words to total words.")
    compression_ratio: float = Field(..., description="Ratio of compressed size to original size.")

class RiskFlags(BaseModel):
    pii_detected: bool = Field(..., description="True if potential PII is detected.")
    ip_risk_detected: bool = Field(..., description="True if potential IP risks (e.g., quotes) are detected.")
    pii_summary: Dict[str, int] = Field(default_factory=dict, description="Summary of detected PII types and counts.")
    ip_risk_summary: Dict[str, int] = Field(default_factory=dict, description="Summary of detected IP risk types and counts.")

class Provenance(BaseModel):
    report_uuid: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique identifier for the report.")
    file_sha256: str = Field(..., description="SHA-256 hash of the input file.")
    timestamp_utc: str = Field(default_factory=lambda: datetime.now(ZoneInfo("UTC")).isoformat(), description="Timestamp of the report generation in UTC.")
    config_snapshot: Dict[str, Any] = Field(..., description="Snapshot of the configuration used for this report.")
    app_version: str = Field(default=APP_VERSION, description="Version of the application.")
    schema_version: str = Field(default=SCHEMA_VERSION, description="Version of the report schema.")

class AnalysisResult(BaseModel):
    provider_used: str = Field(..., description="The service provider used for analysis (e.g., 'openai', 'huggingface', 'local').")
    model_used: Optional[str] = Field(None, description="The specific model used for analysis.")
    extractive_summary: str = Field(..., description="Summary generated by extracting key sentences.")
    abstractive_summary: str = Field(..., description="Summary generated by an LLM.")
    influence_score: float = Field(..., description="Calculated score representing the potential influence of the content.")
    cost_usd: float = Field(..., description="Estimated cost of the analysis in USD.")

class Report(BaseModel):
    file_path: str = Field(..., description="Path to the analyzed file.")
    metrics: TextMetrics
    risk: RiskFlags
    analysis: AnalysisResult
    provenance: Provenance